import os
import requests
from datetime import datetime, timedelta, timezone
import feedparser
from dateutil import parser as dateparser

PAGE_ID = os.getenv("FB_PAGE_ID")
PAGE_TOKEN = os.getenv("FB_PAGE_TOKEN")

# A few solid RSS feeds (stocks / forex / crypto)
FEEDS = {
    "Stocks": [
        "https://www.cnbc.com/id/100003114/device/rss/rss.html",
        "https://feeds.a.dj.com/rss/RSSMarketsMain.xml",
    ],
    "Forex": [
        "https://www.dailyfx.com/feeds/latest",
    ],
    "Crypto": [
        "https://www.coindesk.com/arc/outboundfeeds/rss/",
    ],
}

def pick_fresh_item(urls, within_hours=24):
    cutoff = datetime.now(timezone.utc) - timedelta(hours=within_hours)
    best = None
    for url in urls:
        feed = feedparser.parse(url)
        for e in feed.entries[:8]:  # scan a few recent items
            # Try to parse a published time; fall back to now if missing
            pub = None
            for key in ("published", "updated", "created"):
                if getattr(e, key, None):
                    try:
                        pub = dateparser.parse(getattr(e, key)).astimezone(timezone.utc)
                        break
                    except Exception:
                        pass
            if pub is None:
                pub = datetime.now(timezone.utc)

            # Keep the freshest item within the window
            if pub >= cutoff:
                if best is None or pub > best[0]:
                    best = (pub, e.title.strip(), getattr(e, "link", "").strip())
    return best  # (datetime, title, link) or None

def build_roundup():
    lines = []
    for topic, urls in FEEDS.items():
        item = pick_fresh_item(urls, within_hours=24)
        if item:
            _, title, link = item
            lines.append(f"â€¢ [{topic}] {title} â€” {link}")
    if not lines:
        lines.append("â€¢ No fresh items found in the last 24h.")
    now = datetime.now(timezone.utc)
    header = f"ðŸ“ˆ Market news roundup ({now:%Y-%m-%d %H:%M} UTC)"
    hashtags = "\n\n#stocks #forex #crypto #markets"
    return header + "\n\n" + "\n".join(lines) + hashtags

def post_to_facebook(message: str):
    url = f"https://graph.facebook.com/v23.0/{PAGE_ID}/feed"
    resp = requests.post(url, data={"message": message, "access_token": PAGE_TOKEN}, timeout=30)
    try:
        resp.raise_for_status()
    except Exception:
        print("Facebook API error:", resp.status_code, resp.text)
        raise
    print("Posted successfully:", resp.json())

def main():
    if not PAGE_ID or not PAGE_TOKEN:
        raise SystemExit("Missing FB_PAGE_ID or FB_PAGE_TOKEN environment variables.")
    message = build_roundup()
    print("---- Message preview ----\n", message, "\n-------------------------")
    post_to_facebook(message)

if __name__ == "__main__":
    main()

